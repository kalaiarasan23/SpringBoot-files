* Spring Rest - OverView
  - REST = Respresentational State Transfer
    - It an software archtechiture style. It define set of constraints to creating web services.
    - This web services are called Restful API.
  - REST was first by Roy Fielding in 2000.
  - Rest is create to treat Network resources as Object. That can be access by HTTP method such as GET, POST, PUT, DELETE.
  - CLIENT-SERVER as Independently develope and update.
  - Stateless
  - Cacheable
  - Layered System (load)
  - Code on Demand(optional)
  - Uniform Interface
    - Identification of resources
    - Manipulation of resources through these representations
    - Self-description messages
    - Hypermedia As the engine of Appllication state(HATEOS)

** Overview
   - The web's architectural principles
   - Unique Identification of Resources (URI)
   - Different resource representation
   - Hypermedia / Linking of resources
   - stateless communication
   - standard methods (Get, Post, put, delete) and responses (200 ok, 404 not found)

* REST Resource Design 
   + The resource should always be plural nouns in the API endpoint and if one instance resource should be retrieved, pass the id in the URL:
     - eg. GET/accounts -> acounts 
     - GET/accounts/1 -> get id 1 from 
     - DELETE/accounts/2
   + In case od nested resources (resources under a resource), the resources should be accessible as follows:
     - GET/accounts/1/payments/56 (get payments in accounts id=1)
   + Use the HTTP methods to specify what to do with this resource. With methods GET, POST, PUT, PATCH, DELETE you can provide CRUD functionality(Create, Read, Update, Delete)
   + Use HTTP methods (aka ""verbs) to specify what to do with this resource. With methods GET, POST, PUT, PATCH, DELETE you can provide CRUD functionality (Create, Read, Update, Delete)
   
     |----------------------+----------------------------------------+------------------------------------------+------------------------------------------------+-------------------------------------------|
     | Resource             | GET                                    | POST                                     | PUT                                            | DELETE                                    |
     |----------------------+----------------------------------------+------------------------------------------+------------------------------------------------+-------------------------------------------|
     | /accounts            | Get all accounts                       | Create new account                       | Bulk update all accounts                       | Delete all accounts                       |
     | /accouts/1           | Get account with ID 1                  | Error                                    | Update account with ID 1                       | Delete account with ID 1                  |
     | /accounts/1/payments | get all payments for account with ID 1 | create new Payment for account with ID 1 | Bulk update all payments for account with ID 1 | Delete all payments for account with ID 1 |
     |----------------------+----------------------------------------+------------------------------------------+------------------------------------------------+-------------------------------------------|
     
* HTTP Methods
  + GET - use to retrieve data from a server. It is read-only operation i.e it does not affect the state of resource.
  + POST- Sent date to a server to create a new resource. Data is include in the body of request.
  + PUT - update resource or create new if does not exist in resource. Data is include in the body of request.
  + DELETE - delete is specific in URL.
  + PATCH - use to parcial modification
  + OPTION -
  + HEAD - only return 

* Response Status codes or HTTP status code or three digit code 
  - HTTP response indicating the outcome of the request made by the client
  - 1xx - Informational
  - 2xx - success
  - 3xx - Redirection
  - 4xx - client error
  - 5xx - server error

** 2xx - Success Category 
   - 200 - ok - successfully
   - 201 - create - successfully and create new resource
   - 204 - no content - successfully process in server but no content in server. (After delete request when we put or post request)
** 3xx - Redirection Category
   - 304 - not modified - 

** 4xx - client error
   - 400 - BAD request - argument
   - 401 - Unauthorized - not authcation user or wrong user name and password
   - 403 - forbidden - 
   - 404 - NOT Found - No endpoint on port 8080
** 5xx 
   - 500 - Internal Server Error
   - 503 - service unavailable

* Code 
** First create our controller - FirstController
   - Create a class as FirstController and give annotation as @RestController.
   - First to check POM as spring-boot-starter-web
   - Create EndPoint or HTTP method
     - To perform GET method - use @GetMapping("") // inside REST we use GET operation
     - Then create a method with String returnType
   - Now, Go to browser localhost:8080/  we got the result.

*** Code for above explaination
#+BEGIN_SRC java
@RestController
public class FirstController {
	@GetMapping("/he")
	public String sayHello() {
		return "hi, I am developer";
	}
}
#+END_SRC

** After that inspect
   - Go to inspect- network - all. After that refresh all we can show that code 200 or 404.

** now Go to code (2.25.21)
   - give @ResponseStatus()

* PostMapping code
#+BEGIN_SRC java
@PostMapping("/post")
	public String post(String message)
	{
		return "Request accepted and message "+ message ;
	}
#+END_SRC
** if we run code and 
** how to view in PostMapping in PostMan Api
   - open Postman, click +(plus symbol) on left corner.
   - Select the HTTP request as POST
   - enter the URL localhost:8080/post and send
*** we got result as null so we go to body 
    - raw
    - Text
    - name
   
*** still null. So we should add @RequestBody in method parameter
#+BEGIN_SRC java
@PostMapping("/post")
	public String post(@RequestBody String message) // here @RequestBody
	{
		return "Request accepted and message "+ message ;
	}
#+END_SRC

*** Now restart the server and run the postman. It will works fine on Postman.

*** Now we implement on code
#+BEGIN_SRC java
@PostMapping("/post")
	public String post(String message)
	{
		return "Request accepted and message "+ message ;
	}
#+END_SRC

** Now we can transver java object in RequestBody by POJO class
   - create a POJO class (Order) with String CustomerName,ProductName and int quantity.
   - Go to Controller,Change PostMapping method from String to Order.
   - change the order.toString() .

*** code
#+BEGIN_SRC java
//POJO class
public class Order {
	private String customerName;
	private String productName;
	private int quantity;
}

// in controller class
@PostMapping("/post")
	public String post(Order order)
	{
		return "Request accepted and message "+ order.toString() ;
	}
#+END_SRC

**** as the result, all are null because we didn't create any accessories(Getter and Setters)
     - we create Setter and getter and toString method.
     - Now the values are view in postman.
     - Getter are used in serialisation
     - Setter are used in Deserialisation

***** To specify different name use @JsonProperty
      - jackson libiary for serialized and deserialized.
      - @JsonProperty is a marker annotation that used to define a non-static method as setter and getter for logical purpose.
 
***** Code
#BEGIN_SRC java
public class Order {
        @JsonProperty("cName")
	private String customerName;
	@JsonProperty("P-name")
	private String productName;
	@JsonProperty("q")
	private int quantity;
}
#END_SRC

***** If we restart and run on postman
      - we got again null
      - now change the body- raw - json
      - change name as cName , pName, q in body of postman
      - Now result are correct

** After Java-14 record for represent our requestBody
   - Create Record and name(String customerName,String productName, int Quantity) {}
*** code
#+Begin_src java
public record OrderRecord(
	 String customerName,String productName, int quality) {
}

// in Controller class
@PostMapping("/postMethod2")
	public String postMethod(@RequestBody OrderRecord order)
	{
		return "Request accepted and message "+ order;
	}

#+End_src

*** Restart server
    - Go to postman, run /postMethod2
    - Body enter, {String customerName, String productName, int quantity}

** order vs pojo class

* parameter code in java
** @GetMapping("/hello/{user-name}")
   - public String pathVar(@pathVariable("user-name") String username) {return "my value = "+username;}
*** code 
#Begin_Src java
// controller class localhost:8080/hello?name=raj&fName=ram  
	public String pathVar2(@RequestParam("name") String fName, @RequestParam("lName") String lName) {
		return "my value "+ fName +" lastName "+lName;
	}
// result my value raj ram
#+End_Src

* PathVariable and RequestParam 
  - Both are the annotation used for extracting values from the URL of an HTTP request.
  - They are used in the spring MVC Handler methods.

** Different 
*** Path Variable is used to extract values from the URI path
    - So it's typically used in restful website where the URL contains a value representing some sort of resources identifier.
    - So the annotated parameter in the method declaration is bound to the path variable of same name.
*** RequestParam is used to extract query parameters from the URL 
    - So query parameters are typically used to carry context information for the request and are separated from the URI using exclamation mark symbol and are chained with the end symbol.
    - PathVariable is used when a value you want is actually part of the URI
    - while request param is used when the value is passed as a query parameter.
* most important 3.10.00
* Dispatcher servlet
  - we already have Controller class
  - We have /hello and /hello as RequestParam if we run that code
  - We got exception(BeanCreationException)
